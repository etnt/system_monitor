%% -*- mode: erlang -*-
%%--------------------------------------------------------------------------------
%% Copyright 2020 Klarna Bank AB
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%--------------------------------------------------------------------------------
{application, system_monitor,
 [ {description,  "Monitoring app that exports Erlang VM introspection data to any backend. "
                  "Defaults to Postgres"}
 , {licenses,     ["Apache 2.0"]}
 , {vsn,          "git"}
 , {registered,   []}
 , {modules,      []}
 , {mod,          {system_monitor_app, []}}
 , {applications, [kernel, stdlib, supervisor3, epgsql]}
 , {env,
    [ %% Supervisor restart intensity, specified as: {MaxR,MaxT}
      %% If more than MaxR number of restarts occur in the last MaxT seconds,
      %% the supervisor terminates all the child processes and then itself.
      {restart_intensity, {10,20}}
      %% Specifies how many topmost processes should be reported per
      %% category (such as `top_memory', `top_reductions', etc.)
    , {top_num_items, 10}
      %% Specifies how often process top should be collected (in ms):
    , {top_sample_interval, 2000}
      %% Specifies sample size for the approximate metrics, such as
      %% 'percentage of processes started by an app', and 'percentage
      %% of processes running a function':
    , {top_sample_size, 3000}
      %% Stop reporting exact process data when the number of
      %% processes is above this threshold, in order to avoid
      %% hammering the VM with introspection BIFs (this doesn't affect
      %% approximate monitors that rely on sampling):
    , {top_max_procs, 15000}
      %% By default system_monitor tries to collect process dictionary
      %% of the topmost processes in order to determine start function
      %% more precisely. In theory this can cause problems if process
      %% dictionary contains very large amounts of data. This option
      %% allows to fallback to safety:
    , {collect_process_dictionary, true}
      %% Don't report values to `app_top' and `fun_top' below the
      %% threshold as insignificant:
    , {top_significance_threshold,
       #{ current_function => 0.01 % 1 percent
        , initial_call     => 0.01 % 1 percent
        , processes        => 100  % number of processes
        , reductions       => 0.01 % 1 percent
        , memory           => 10000 % words
        }}

      %% Specify node-specific healthcheck function as `{module(),
      %% function()}', for example: `{my_app, node_status}'. This
      %% function should return an HTML-formatted status report:
    , {node_status_fun, undefined}
      %% List of additional status check functions, list of:
      %% {Module, Function, RunMonitorAtTerminate, NumberOfTicks}
    , {status_checks, []}

      %% Callback module, assumed to export a
      %% system_monitor_event(EventKind,Info) function;
      %% this function will be invoked whenever a BEAM event occur.
    , {external_monitoring, undefined}

      %% Set to Module that export a produce(Type,Event) function.
      %% Typically set to 'system_monitor_pg' to enable export
      %% of collected metrics to Postgres.
    , {callback_mod, undefined}

      %% custom_metrics - Callback hook for adding custom metrics.
      %%
      %% Should contain a list of: {Type :: atom(), Module :: atom()}
      %% where Type is the first argument to the
      %% system_monitor_callback:produce/2 function (where Events
      %% is the second argument).
      %%
      %% Module is a gen_server with functions for dealing with custom metrics.
      %% The gen_server will be started by the system_monitor supervisor.
      %% The Module must export the following functions,
      %% which should return as described below:
      %%
      %%   monitor() => {Module,Function,RunMonitorAtTerminate,NumberOfTicks}
      %%   query(Type) => SQL insert expression as a binary.
      %%   params(Type, Event) => A list of values to be inserted.
      %%   table(Type) => Postgres table name as a binary.
      %%
      %% Function is the function that will be invoked every NumberOfTicks
      %% second; it is supposed to collect the metric and invoke the
      %% system_monitor_callback:produce/2
      %%
      %% Event is a member of the Events list (see above).
      %%
      %% Note: Requires that `callback_mod` is set to take effect!
      %%
    , {custom_metrics,
       [{memory, system_monitor_memory_metric}]}

      %% BEAM event settings:
    , {beam_events,
       [ busy_port
       , busy_dist_port
       , {long_gc, 500}
       , {long_schedule, 500}
       ]}
    , {suspect_procs_max_memory, 524288000} %% 500 MB
    , {suspect_procs_max_message_queue_len, 5000}
    , {suspect_procs_max_total_heap_size, 524288000} %% 500 MB

      %% Don't query memory if message_queue_len is longer than this:
    , {mql_limit_for_memory, 100000}

      %%
      %% P R O D U C E R (client)
      %%
      %% Enable/Disable system_monitor_producer
    , {producer_enable, false}
      %% where we should connect to the Consumer
    , {producer_ip, {192,168,1,170}}
    , {producer_port, 8888}
      %% Use TLS (or not)
    , {producer_use_tls, true}
    , {producer_tls_opts,
       [ {verify, verify_peer}
       , {log_level, info}       % set to 'debug' for loads of output
       , {versions, ['tlsv1.2']}
         %% Note: when `verify` is set to `verify_peer`, we want to
         %% disable the Hostname check.
       , {server_name_indication, disable}
       , {cacertfile, ".../CA/certs/cacert.pem"}
       , {certfile, ".../CA/client_keys/client@acme.com.pem"}
       ]}

      %%
      %% C O N S U M E R (server)
      %%
      %% Enable/Disable system_monitor_consumer
    , {consumer_enable, false}
      %% what IP/Port the Consumer should listen to
    , {consumer_listen_ip, {0,0,0,0}}
    , {consumer_listen_port, 8888}
      %% Use TLS (or not)
    , {consumer_use_tls, true}
    , {consumer_tls_opts,
       [ {verify, verify_peer}
         %% Used together with 'verify_peer}'. If set to true,
         %% the server fails if the client does not have a certificate
         %% to send, that is, sends an empty certificate. If set to
         %% false, it fails only if the client sends an invalid
         %% certificate (an empty certificate is considered valid).
         %% Defaults to false.
       , {fail_if_no_peer_cert, true}
       , {log_level, info}       % set to 'debug' for loads of output
       , {versions, ['tlsv1.2']}
       , {cacertfile, ".../CA/certs/cacert.pem"}
       , {certfile, ".../CA/certs/server.crt"}
       , {keyfile, ".../CA/certs/server.key"}
         %% Perform CRL (Certificate Revocation List) verification
         %% on the peer certificate.
       , {crl_check, peer}
       , {crl_cache, {ssl_crl_hash_dir, {internal, [{dir, ".../CA/crl"}]}}}
       ]
      }
    ]
   }
 ]
}.
